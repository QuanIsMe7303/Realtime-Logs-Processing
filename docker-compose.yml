version: "3.8"
services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - logs-processing-network

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - 9092:9092
    volumes:
      - streaming-data:/var/lib/kafka/data
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "logs-topic:1:1"
    depends_on:
      - zookeeper
    networks:
      - logs-processing-network

  cassandra:
    image: 'bitnami/cassandra:latest'
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=realtime_logs_cluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_USER=cassandra
      - CASSANDRA_PASSWORD=cassandra
      - CASSANDRA_INIT_SCRIPT=/docker-entrypoint-initdb.d/init.cql
    volumes:
      - cassandra_data:/var/lib/cassandra
      - ./cassandra/init.cql:/docker-entrypoint-initdb.d/init.cql
    networks:
      - logs-processing-network

  spark:
    image: bitnami/spark:latest
    container_name: spark
    environment:
      SPARK_MODE: master
    ports:
      - "8080:8080"
    volumes:
      - spark-checkpoints:/opt/spark-apps/checkpoints
    networks:
      - logs-processing-network

  spark-worker-1:
    image: bitnami/spark:latest
    container_name: spark-worker-1
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark:7077
    depends_on:
      - spark
    volumes:
      - spark-checkpoints:/opt/spark-apps/checkpoints
    networks:
      - logs-processing-network

  spark-worker-2:
    image: bitnami/spark:latest
    container_name: spark-worker-2
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark:7077
    depends_on:
      - spark
    volumes:
      - spark-checkpoints:/opt/spark-apps/checkpoints
    networks:
      - logs-processing-network

  pyspark-app:
    build: ./pyspark-app
    container_name: pyspark-app
    depends_on:
      - spark
      - kafka
      - cassandra
    networks:
      - logs-processing-network
    volumes:
      - ./pyspark-app/src:/opt/spark-apps
      - ./pyspark-app/jars:/root/.ivy2/jars
      - spark-checkpoints:/opt/spark-apps/checkpoints

  log-generator:
    build: 
      context: ./log-generator
      dockerfile: Dockerfile
    container_name: log-generator
    depends_on:
      - kafka
    networks:
      - logs-processing-network
    volumes:
      - ./data/access.log:/app/data/data.log:ro
      - ./log-generator/producer.py:/app/producer.py
      - log-position:/app/position

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "xpack.security.enabled=false"
    ports:
      - "9200:9200"
    networks:
      - logs-processing-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.5.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - logs-processing-network

volumes:
  streaming-data:
  log-position:
  cassandra_data:
  spark-checkpoints:
networks:
  logs-processing-network: