version: "3.8"
services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - logs-processing-network

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - 9092:9092
    volumes:
      - streaming-data:/var/lib/kafka/data
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      # KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9094
      # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "logs-topic:1:1"
    depends_on:
      - zookeeper
    networks:
      - logs-processing-network

  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: logs_db
    networks:
      - logs-processing-network

  spark:
    image: bitnami/spark:latest
    container_name: spark
    environment:
      SPARK_MODE: master
    ports:
      - "8080:8080"
    volumes:
      - spark-checkpoints:/opt/spark/checkpoints
    networks:
      - logs-processing-network

  spark-worker:
    image: bitnami/spark:latest
    container_name: spark-worker
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark:7077
    depends_on:
      - spark
    volumes:
      - spark-checkpoints:/opt/spark/checkpoints
    networks:
      - logs-processing-network

  pyspark-app:
    build: ./pyspark-app
    container_name: pyspark-app
    depends_on:
      - spark
      - kafka
    networks:
      - logs-processing-network
    volumes:
      - ./pyspark-app/src:/opt/spark-apps
      - ./pyspark-app/jars:/root/.ivy2/jars
      - spark-checkpoints:/opt/spark/checkpoints
  log-generator:
    build: 
      context: ./log-generator
      dockerfile: Dockerfile
    container_name: log-generator
    depends_on:
      - kafka
    networks:
      - logs-processing-network
    volumes:
      - ./data/access.log:/app/data/data.log:ro
      - ./log-generator/producer.py:/app/producer.py
      - log-position:/app/position

volumes:
  spark-checkpoints:
  streaming-data:
  log-position:
networks:
  logs-processing-network:
